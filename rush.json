{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  "rushVersion": "5.7.0",
  "pnpmVersion": "2.15.1",

  "pnpmOptions": {
    "strictPeerDependencies": false
  },

  "nodeSupportedVersionRange": ">=8.9.4 <9.0.0 || >=10.9.0 <12.0.0",

  "projectFolderMaxDepth": 3,

  "gitPolicy": {
    /**
     * Work at a big company?  Tired of finding Git commits at work with unprofessional Git
     * emails such as "beer-lover@my-college.edu"?  Rush can validate people's Git email address
     * before they get started.
     *
     * Define a list of regular expressions describing allowable e-mail patterns for Git commits.
     * They are case-insensitive anchored JavaScript RegExps.  Example: ".*@example\.com"
     *
     * IMPORTANT: Because these are regular expressions encoded as JSON string literals,
     * RegExp escapes need two backspashes, and ordinary periods should be "\\.".
     */
    "allowedEmailRegExps": ["[^@]+@microsoft.com"],
    "versionBumpCommitMessage": "Applying package updates. [skip ci]",
    /**
     * When Rush reports that the address is malformed, the notice can include an example
     * of a recommended email.  Make sure it conforms to one of the allowedEmailRegExps
     * expressions.
     */
    "sampleEmail": "mrexample@microsoft.com"
  },

  "repository": {
    /**
     * This setting is sometimes needed when using "rush change" with multiple Git remotes.
     * It specifies the remote url for the official Git repository.  If this URL is provided,
     * "rush change" will use it to find the right remote to compare against.
     */
    "url": "https://github.com/Microsoft/just.git"
  },

  "eventHooks": {
    "preRushInstall": [
      // "common/scripts/pre-rush-install.js"
    ],

    "postRushInstall": [],

    "preRushBuild": [],

    "postRushBuild": []
  },

  /**
   * Rush can collect anonymous telemetry about everyday developer activity such as
   * success/failure of installs, builds, and other operations.  You can use this to identify
   * problems with your toolchain or Rush itself.  THIS TELEMETRY IS NOT SHARED WITH MICROSOFT.
   * It is written into JSON files in the common/temp folder.  It's up to you to write scripts
   * that read these JSON files and do something with them.  These scripts are typically registered
   * in the "eventHooks" section.
   */
  // "telemetryEnabled": false,

  "projects": [
    {
      "packageName": "just-task",
      "projectFolder": "packages/just-task",
      "versionPolicyName": "RepoPolicy"
    },
    {
      "packageName": "create-just",
      "projectFolder": "packages/create-just",
      "shouldPublish": true
    },
    {
      "packageName": "just-stack-monorepo",
      "projectFolder": "packages/just-stack-monorepo",
      "shouldPublish": true
    },
    {
      "packageName": "just-stack-uifabric",
      "projectFolder": "packages/just-stack-uifabric",
      "shouldPublish": true
    },
    {
      "packageName": "just-stack-single-lib",
      "projectFolder": "packages/just-stack-single-lib",
      "shouldPublish": true
    },
    {
      "packageName": "just-scripts",
      "projectFolder": "packages/just-scripts",
      "shouldPublish": true
    },
    {
      "packageName": "just-scripts-utils",
      "projectFolder": "packages/just-scripts-utils",
      "shouldPublish": true
    },
    {
      "packageName": "just-task-docs",
      "projectFolder": "packages/documentation/website",
      "shouldPublish": false
    },
    {
      "packageName": "just-task-logger",
      "projectFolder": "packages/just-task-logger",
      "shouldPublish": true
    },
    {
      "packageName": "example-lib",
      "projectFolder": "packages/example-lib",
      "shouldPublish": false
    },
    {
      "packageName": "just-task-scripts",
      "projectFolder": "scripts",
      "shouldPublish": false
    }
    // {
    //   "packageName": "just-scenario-tests",
    //   "projectFolder": "packages/just-scenario-tests",
    //   "shouldPublish": false
    // }
  ]
}
